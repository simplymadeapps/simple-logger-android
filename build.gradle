apply plugin: 'com.android.library'

apply plugin: 'jacoco'

def coverageSourceDirs = [
        'src/main/java',
        'src/debug/java'
]

task jacocoTestReport(type : JacocoReport, dependsOn : 'testDebugUnitTest') {
    group       = 'Reporting'
    description = 'Generate JaCoCo coverage reports'

    reports {
        xml.enabled  = true
        html.enabled = true
    }

    classDirectories = fileTree(
            dir      : 'build/intermediates/classes/debug',
            excludes : [
                    '**/R.class',
                    '**/R$*.class',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*RealmProxy.*',
                    '**/*ColumnInfo.*',
                    '**/*RealmModule*.*',
                    '**/AutoValue_*.*',
                    '**/Dagger*.*',
                    '**/*Module_Provide*Factory.*',
                    '**/*_Factory.*',
                    '**/*_MembersInjector.*',
                    '**/*_LifecycleAdapter.*'
            ]
    )

    sourceDirectories = files(coverageSourceDirs)
    executionData     = fileTree(
            dir     : "$buildDir",
            include : [ 'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec' ]
    )

    doFirst {
        files('build/intermediates/classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 2
        versionName "1.1"

    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
}

dependencies {
    implementation 'com.amazonaws:aws-android-sdk-core:2.3.9'
    implementation 'com.amazonaws:aws-android-sdk-s3:2.3.9'

    def room_version = "2.0.0"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.6'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.6'
}